<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.community.mapper.MessageMapper">

    <sql id="selectMessageFields">
        id,from_id,to_id,conversation_id,content,status,create_time
    </sql>

    <sql id="insertMessageFields">
        from_id,to_id,conversation_id,content,status,create_time
    </sql>

    <resultMap id="messageMap" type="message">
        <result column="from_id" property="fromId"></result>
        <result column="to_id" property="toId"></result>
        <result column="conversation_id" property="conversationId"></result>
        <result column="create_time" property="createTime"></result>
    </resultMap>


    <select id="selectConversations" resultMap="messageMap">
        select <include refid="selectMessageFields"></include>
        from message
        where id in
            (select max(id)
            from message
            where status != 2
                and from_id != 1
                and (from_id = #{userId} or to_id = #{userId})
            group by conversation_id)
        order by id desc
        limit #{offset},#{limit}
    </select>

    <select id="selectConversationCount" resultType="int">
        select count(m.maxid)
        from
        (select max(id) as maxid
        from message
        where status != 2
            and from_id != 1
            and (from_id = #{userId} or to_id = #{userId})
        group by conversation_id) as m
    </select>

    <select id="selectLetters" resultMap="messageMap">
        select <include refid="selectMessageFields"></include>
        from message
        where status != 2
            and from_id != 1
            and conversation_id = #{conversationId}
        order by id desc
        limit #{offset},#{limit}
    </select>

    <select id="selectLettersCount" resultType="int">
        select count(id)
        from message
        where status != 2
            and from_id != 1
            and conversation_id = #{conversationId}
    </select>

    <select id="selectLettersUnreadCount" resultType="int">
        select count(id)
        from message
        where status = 0
            and from_id != 1
            and to_id = #{userId}
          <if test="conversationId!=null">
              and conversation_id = #{conversationId}
          </if>
    </select>

    <insert id="insertMessage" parameterType="message" keyProperty="id" useGeneratedKeys="true">
        insert into message(<include refid="insertMessageFields"></include>)
        value (#{fromId},#{toId},#{conversationId},#{content},#{status},#{createTime})
    </insert>

    <update id="updateStatus" >
        update message set status = #{status}
        where id in
        <foreach collection="ids" item="id" open="(" separator=","  close=")">
            #{id}
        </foreach>
    </update>

    <select id="selectLatestNotice" resultMap="messageMap">
        select <include refid="selectMessageFields"></include>
        from message
        where id in (
            select max(id) from message
            where status != 2
            and from_id = 1
            and to_id = #{userId}
            and conversation_id = #{topic}
        )
    </select>

    <select id="selectNoticeCount" resultType="int">
        select count(id)
        from message
        where status != 2
        and from_id = 1
        and to_id = #{userId}
        and conversation_id = #{topic}



    </select>

    <select id="selectUnreadNoticeCount" resultType="int">
        select count(id)
        from message
        where status = 0
        and from_id = 1
        and to_id = #{userId}
        <if test="topic!=null">
            and conversation_id = #{topic}
        </if>
    </select>

    <select id="selectNotices" resultMap="messageMap">
        select <include refid="selectMessageFields"></include>
        from message
        where status != 2
        and from_id = 1
        and to_id = #{userId}
        and conversation_id = #{topic}
        order by create_time desc
        limit #{offset},#{limit}
    </select>


</mapper>